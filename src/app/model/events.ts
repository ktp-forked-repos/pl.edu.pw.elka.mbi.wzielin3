/**
 * Abstract Event generated by simulator.
 */
import {PathElement} from './path-element';

/**
 * Abstract simulator event.
 */
export abstract class AppEvent {
  // intentionally empty
}

/**
 * Abstract event concerning path decision.
 */
export abstract class PathAppEvent extends AppEvent {
  constructor(public pathElement: PathElement,
              public allAllowedPathElements: PathElement[]) {
    super();
  }
}

/**
 * Cell has been filled with value event.
 */
export class CellFilledEvent extends PathAppEvent {
  constructor(pathElement: PathElement, allAllowedPathElements: PathElement[]) {
    super(pathElement, allAllowedPathElements);
  }
}

/**
 * Element of the path has been reconstructed.
 */
export class PathElementReconstructedEvent extends PathAppEvent {
  constructor(pathElement: PathElement, allAllowedPathElements: PathElement[]) {
    super(pathElement, allAllowedPathElements);
  }
}

/**
 * Simulation is finished
 */
export class SimulationFinishedEvent extends AppEvent {
  constructor(private path: PathElement[]) {
    super();
  }

  public getSequence(i: number): string {
    let sequence = '';
    for (let idx = 0; idx < this.path.length; ++idx) {
      sequence += this.path[idx].symbols[i];
    }
    return sequence;
  }
}
