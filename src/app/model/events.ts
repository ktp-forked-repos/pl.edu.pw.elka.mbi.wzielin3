/**
 * Abstract Event generated by simulator.
 */
import {PathElement} from './path-element';

export abstract class AppEvent {
  protected cellToString(idx: number[]): string {
    return 'Cell(' + idx[0] + ', ' + idx[1] + ', ' + idx[2] + ')';
  }

  protected symbolsToString(idx: string[]): string {
    return 'Symbols(' + idx[0] + ', ' + idx[1] + ', ' + idx[2] + ')';
  }
}

/**
 * Cell has been filled with value event.
 */
export class CellFilledEvent extends AppEvent {
  constructor(private pathElement: PathElement) {
    super();
  }

  public toString() {
    return this.cellToString(this.pathElement.endIdx) + ' filled with ' + this.pathElement.endCellVal;
  }
}

export class PathElementReconstructedEvent extends AppEvent {
  constructor(private pathElement: PathElement) {
    super();
  }

  public toString() {
    return this.cellToString(this.pathElement.startIdx) + ' is previous which results in ' + this.symbolsToString(this.pathElement.symbols);
  }
}
